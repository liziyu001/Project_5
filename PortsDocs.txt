Run the Server before connecting!!!
The Server will keep running until being terminated manually.
Please only send and require String from/to the server

ServerName: localhost

Port:4000 Login
    Input: username + "\n" + password + "\n"
        ex. "William\n123\n"
    Return:
        if the input matches an account information, return: the value of isStudent of the account + "\n"
            ex. "true\n" OR "false\n"
        if the input doesn't match any of account, return: "Fail"


Port:4001 Register
    Input: username + "\n" + password + "\n" + role + "\n"
        ex. "QWER\n1234\nTeacher" OR "KKK\n123\nStudent"
    Return:
        if the register is success, return: "Success"
        if there is duplicate id or invalid input, return: "Fail"
    Account.txt will be updated


Port:4002 Get the Course List as a String
    Input:None
    Return: the course list
        ex. "1. CS180\n2. CS193\n3. MA261\n"
    The list will be immediately returned after connection


Port:4003 Get the Quiz List of a given course as a String
    Input: Course Name(get from user while choosing from list from port 4002)
        ex. "CS180\n"
    Return:
        if the input course was not found in the course list, return: "Given Course is not found\n"
        if there is no quiz under the input course, return: "No quiz found in this course\n"
        if proper quiz list is found, return the quiz names as a String.
            ex. "1. Quiz One\n2. Quiz Two\n3. Quiz Three\n"


Port:4004 Create Course
    Input:A Course Name
        ex. "CS193\n"
    Return:
        if the course is created successfully, return: "Success\n"
        if there is duplicate course name, return: "Fail\n"
    Course files will be updated


Port:4005 Create Quiz
    Input:Course name and quiz info, must be in the following format
    "<Course name>(record while choosing quiz)\n<Quiz name>(record while choosing quiz)\n<number of questions>\n<prompt of first question>\n<first option>\n<second option>\n<third option>\n<forth option>\n<prompt of second question>...<fourth option>\n"
        ex. CS193
            The first Quiz
            2
            The first Question prompt
            The first Choice
            The second Choice
            The third Choice
            The fourth Choice
            The second Question prompt
            The first Choice
            The second Choice
            The third Choice
            The fourth Choice
    return:
        If the quiz is created successfully, return "Success\n"
        if any error occurs, return "Fail\n"
    Related files will be updated


Port:4006 Edit username
    Input: "<old username>(record while login or register)\n<new username>\n"
        ex: "abc\n123\n"
    return:
        If the edit is successful, return "Success\n"
        If the new username is not available, return "Duplicate new ID\n"
        If the input username is not found, return "Account not found\n"
    Account file will be updated


Port:4007 Edit Password
    Input: "<username>(record while login or register)\n<new Password>\n"
        ex: "abc\n12345\n"
    return:
        If the edit is successful, return "Success\n"
        If the input username is not found, return "Account not found\n"
    Account file will be updated


Port:4008 Delete account
    Input: "<username>(record while login or register)\n"
        ex: "abc\n"
    return:
        If the deletion is successful, return "Success\n"
        If the input username is not found, return "Account not found\n"
    Account will be deleted from the account file


Port:4009 Edit Quiz
    same as port 4005, except no new quiz will be created(old quiz will be edited).
    return:
        If the quiz is edited successfully, return "Success\n"
        if any error occurs, return "Fail\n"


Port:4010  get quiz content
Used while taking quiz or display while grading and viewing grades
    Input: "<courseName>\n<quizName>\n"
    Return:
        quiz content
            ex. The first Quiz
                The first Question prompt
                1. The first Choice
                2. The second Choice
                3. The third Choice
                4. The fourth Choice
                The second Question prompt
                1. The first Choice
                2. The second Choice
                3. The third Choice
                4. The fourth Choice
        If given names are not found, return "Course or Quiz not found\n"



Port:4011 delete quiz
    Input: "<courseName>\n<quizName>\n"
    return:
        If the deletion is successful, return "Success\n"
        If given names are not found, return "Course or Quiz not found\n"
    Quiz will be deleted from file

Note: following service contains submission, which is identified by three identifier: course name, quiz name and people(user id) who takes the quiz

Port:4012 Get list of ungraded submission
(So teacher can choose a submission from this list to grade)
    Input: None
    Return: list of ungraded submission
        ex. "CS180-The first Quiz-William\nCS193-The Second Quiz-Manas"


Port:4013 take quiz
    Input:"<Course name>\n<Quiz name>\n<User id who take the quiz>(record while login or register)\n<set of answers, separate by commas>\n"
        ex. "CS180\nThe first Quiz\nWilliam\n1,4,2,1\n"
    Return: If the quiz is recorded successfully return "Success"
            If there is any error occurs, such as incorrect input format, return "Error"
    New submission will be created

Port:4014 view grading
    Input: "<Course name>\n<Quiz name>(record while choosing graded course)\n<User id who take the quiz>(record while login or register)\n"
        ex. "CS180\nThe first Quiz\nWilliam\n"
    Return: "<subGrade set separate by commas>\n<total grade>\n"
        ex. "1,2\n3"
        if matched submission is not found, return "Submission not found"
        if matched submission is ungraded, return "Not graded"


Port:4015 grade submissions
    Input:"<Course name>\n<Quiz name>\n<User id who take the quiz>(record while choosing ungraded course)\n<set of subGraded, separate by commas>\n"
        ex. "CS180\nThe first Quiz\nWilliam\n1,3,2,1\n"
    Return: if grading is success return "Success"
            if matched submission is not found, return "Submission not found"
            If there is any error occurs, such as incorrect input format, return "Input Format Not Correct"
    Grading will be recorded in the file


Port:4016 Get list of graded submission taken by user
(So Student can choose a submission from this list to view the grade)
    Input: "<Username>\n"
    Return: list of graded submission
        ex. CS180-The Second Quiz-William
            CS193-The Third Quiz-William


Port:4017 Get student answer
    Input: "<Course name>\n<Quiz name>\n<User id who take the quiz>\n"
    Return:"<set of answers, separate by commas>\n"

